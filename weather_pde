/*Compile and upload with 0017 IDE only - revision 5*/

/*
You will need to download and install additonal libraries:
1. http://www.arduino.cc/playground/Code/Sensirion#SHT1x
2. http://www.arduino.cc/playground/Code/Timer1
*/

/*Main Changes on this version:
1: Removed connection to LCD (there's a web interface anyway!)
2: Added luminosity sensor
3: Added Barometric Pressure sensor (NO, I seem to have a problem with the sensor)
4: Optimized the code a little
5: Cleaned up the code making it easier to read
6: recalculation for rain (5 sec sampling is too fast, 
I never got any rain readings. Increased to 30 seconds)
7: Added a bit more comments to make the sensor setup more clear
*/

/*
HARDWARE:
---------
Anemometer (Digital pin 2), rain gauge (Digital pin 3), wind vane (Analog pin 5) from here:
http://www.sparkfun.com/products/8942

Temperature and Humidity sensor from here:
http://www.sparkfun.com/products/8257

Photo resistor on pin analog 0 and connected just as described here:
http://www.arduino.cc/playground/Learning/PhotoResistor

Arduino Diecimilla + Official Ethernet Shield 
(old version, but should work with new version)

*/

#include <Ethernet.h>
#include <WebServer.h>
#include <TimerOne.h>
#include <SHT1x.h>

#define dataPin  7
#define clockPin 8
SHT1x sht1x(dataPin, clockPin);

#define PIN_ANEMOMETER 2
#define PIN_RAIN 3
#define PIN_VANE 5
#define PIN_LIGHT 0

volatile int numRevsAnemometer = 0;
volatile int numClicksRain = 0;
volatile float WindSpeed = 0;
volatile float Percipitation = 0;
volatile int WindDir = 0;
float temp_c = 0.0;
float humidity;
int light;
char* WindQ[2]={"1","2"};
/*below counts the number of times we go to the 
timer interrupt, allows for calcualtion
of multiples of the timer frequency*/
int visits_counter = 0;
/*The value below * 5 seconds = defines
timer frequency for rain calculation
e.g. top_times = 6 (* 5 = 30 seconds)*/
int top_times = 10;

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xAD, 0xED };
byte ip[] = { 10, 0, 0, 10 };
//when connecting the ehternet sheild to a router, you need to 
//assign the IP address you chose to the MAC address you chose
//you can ping the shield from a computer on the network
//to see if it's working

/* This creates an instance of the webserver.  By specifying a prefix
 * of "/", all pages will be at the root of the server. */
#define PREFIX "/"
WebServer webserver(PREFIX, 80);

void helloCmd(WebServer &server, WebServer::ConnectionType type, char *, bool)
{
   int i;
  
  /* this line sends the standard "we're all OK" headers back to the
     browser */
  server.httpSuccess();

  /* if we're handling a GET or POST, we can output our data here.
     For a HEAD request, we just stop after outputting headers. */
  if (type != WebServer::HEAD)  
  {
    server.println("Following is the wind speed: ");
    server.println(WindSpeed);
    server.println(" km/h<P>");
    
    server.println("Following is Precipitation: ");
    server.println(Percipitation);
    server.println(" mm/minute");
    
    server.println("<P>Following is WindDir: ");
    
    if (WindDir <= 27 && WindDir > 17) {WindQ[0] = "E"; WindQ[1] = "";}
    else if (WindDir <= 50 && WindDir > 40) {WindQ[0] = "S"; WindQ[1] = "E";}
    else if (WindDir <= 76 && WindDir > 66) {WindQ[0] = "S"; WindQ[1] = "";}
    else if (WindDir <= 119 && WindDir > 109) {WindQ[0] = "N"; WindQ[1] = "E";}
    else if (WindDir <= 162 && WindDir > 152) {WindQ[0] = "S"; WindQ[1] = "W";}
    else if (WindDir <= 201 && WindDir > 191) {WindQ[0] = "N"; WindQ[1] = "";}
    else if (WindDir <= 226 && WindDir > 216) {WindQ[0] = "N"; WindQ[1] = "W";}
    else {WindQ[0] = "N"; WindQ[1] = "A";}
      
    for (i=0; i<2; i++) server.print(WindQ[i]);

    server.println("<P><P>");
    /*RAW data string to be used by other client programs*/
      
    server.print("Temperature: ");
    server.print(temp_c, DEC);
    server.print("C ");
    server.print("<P>Humidity: ");
    server.print(humidity);
    server.println("%");
    server.print("<P>Light Level: ");
    server.print(light);
      
    server.println("<P>RAW: ");
    server.println(WindSpeed);
    server.println(Percipitation);
    server.println(WindDir);
    server.println(temp_c);
    server.println(humidity);
    server.println(light);      
  }
}

void setup(){

  pinMode(PIN_ANEMOMETER, INPUT);
  digitalWrite(PIN_ANEMOMETER, HIGH);
  attachInterrupt(0, countAnemometer, FALLING);
  
  pinMode(PIN_RAIN, INPUT);
  digitalWrite(PIN_RAIN, HIGH);
  attachInterrupt(1, countRain, FALLING);
  //ISR associated with pin2, goes to countAnemometer function and is triggered when pin goes
  //from HIGH to LOW
  Ethernet.begin(mac, ip);
  /* setup our default command that will be run when the user accesses
   * the root page on the server */
  webserver.setDefaultCommand(&helloCmd);
  /* start the webserver */
  webserver.begin();
  
  Timer1.initialize(5000000);
  // initialize timer1, and set a 5 second period - we are sampling at 5 seconds intervals
  Timer1.attachInterrupt(callback);  // attaches callback() as a timer overflow interrupt

}//end setup()

void loop(){
 
  char buff[64];
  int len = 64;
  int i;  

  /* process incoming connections one at a time forever */
  webserver.processConnection(buff, &len);
  // Read values from the sensor
  temp_c = sht1x.readTemperatureC();    
  humidity = sht1x.readHumidity();
  
  //BELOW is a repetition of the test we do for the server output
  //this should be in a function and called from wherever it was needed
  //I had problems to write a function that outputs a string, so screw it, it works!
  if (WindDir <= 27 && WindDir > 17) {WindQ[0] = "E"; WindQ[1] = "";}
      else if (WindDir <= 50 && WindDir > 40) {WindQ[0] = "S"; WindQ[1] = "E";}
      else if (WindDir <= 76 && WindDir > 66) {WindQ[0] = "S"; WindQ[1] = "";}
      else if (WindDir <= 119 && WindDir > 109) {WindQ[0] = "N"; WindQ[1] = "E";}
      else if (WindDir <= 162 && WindDir > 152) {WindQ[0] = "S"; WindQ[1] = "W";}
      else if (WindDir <= 201 && WindDir > 191) {WindQ[0] = "N"; WindQ[1] = "";}
      else if (WindDir <= 226 && WindDir > 216) {WindQ[0] = "N"; WindQ[1] = "W";}
      else {WindQ[0] = "N"; WindQ[1] = "A";}
  
}//end loop()

void countAnemometer() {
   numRevsAnemometer++;
}//end countAnemometer()

void countRain() {
  numClicksRain++;
}//end countRain

void callback(){
/*the ISR for the timer interrupt, called every 5 seconds*/
//check how many times the switch was closed on this period? this value is on numRevsAnemometer
  WindSpeed = (numRevsAnemometer/ 5) * 2.4; //2.4 K/h for one switch closure per second
  numRevsAnemometer = 0;

/*rain caculation*/
  if (visits_counter < top_times) visits_counter++;
  else{
    Percipitation = 0.28*(numClicksRain*60/5);
    //0.2794 mm per contact closure; this step gives number of clicks per minute unit = mm per minute
    numClicksRain = 0;
    visits_counter = 0;
  }
  /*Get wind direction*/
  WindDir = analogRead(PIN_VANE);
  WindDir >>= 2;
  
  /*Get light level reading*/
  light = analogRead(PIN_LIGHT);
}
