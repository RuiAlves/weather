/*
HARDWARE:
---------
Anemometer (Digital pin 2), rain gauge (Digital pin 3), wind vane (Analog pin 5) from here:
http://www.sparkfun.com/products/8942

Temperature and Humidity sensor from here:
http://www.sparkfun.com/products/8257

Photo resistor on pin analog 0 and connected just as described here:
http://www.arduino.cc/playground/Learning/PhotoResistor

Arduino Diecimilla + Official Ethernet Shield 
(old version, but should work with new version)
*/

/***************LIBRARY LOADING SECTION******************/
/*Library requirements for the webserver:*/
#include <SPI.h>
#include <Ethernet.h>

/*Timer library required to generate an interrupt for rain gauge:*/
#include <TimerOne.h>

/*SHT1 temperature and humidity sensor library:*/
#include <SHT1x.h>
/***************END LIBRARY LOADING SECTION******************/

/*TEMPERATURE AND HUMIDITY SENSOR CONNECTIONS*/
#define dataPin  7
#define clockPin 8
SHT1x sht1x(dataPin, clockPin);

/*WEATHER SENSOR CONNECTIONS*/
#define PIN_ANEMOMETER 2
#define PIN_RAIN 3
#define PIN_VANE 5
#define PIN_LIGHT 0

/*WEATHER SENSOR VARIABLE DEFINITIONS*/
volatile int numRevsAnemometer = 0;
volatile int numClicksRain = 0;
volatile float WindSpeed = 0;
volatile float Percipitation = 0;
volatile int WindDir = 0;

/*TEMP AND HUMIDITY VARIABLE DEFINITIONS*/
float temp_c = 0.0;
float humidity;

/*LUMINOSITY SENSOR VARIABLE DEFINITIONS*/
int light;

char* WindQ[2]={"1","2"};
/*below counts the number of times we go to the 
timer interrupt, allows for calcualtion
of multiples of the timer frequency*/
int visits_counter = 0;
/*The value below * 5 seconds = defines
timer frequency for rain calculation
e.g. top_times = 6 (* 5 = 30 seconds)*/
int top_times = 10;

/*WEBSERVER RELATED VARIABLE DEFINITIONS*/
byte mac[] = { 0x00, 0xAD, 0xBE, 0xEF, 0xAD, 0xED };
IPAddress ip(192,168,1,177);
//when connecting the ehternet sheild to a router, you need to 
//assign the IP address you chose to the MAC address you chose
//you can ping the shield from a computer on the network
//to see if it's working

// Initialize the Ethernet server library
// with the IP address and port you want to use 
// (port 80 is default for HTTP):
EthernetServer server(80);

void listenForEthernetClients() {

  int i;
  
  EthernetClient client = server.available();

  /* if we're handling a GET or POST, we can output our data here.
     For a HEAD request, we just stop after outputting headers. */
  if (client) {
    Serial.println("Got a client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println();
          // print the current readings, in HTML format:
          client.println("Following is the wind speed: ");
          client.println(WindSpeed);
          client.println(" km/h<P>");
          
          client.println("Following is Precipitation: ");
          client.println(Percipitation);
          client.println(" mm/minute");
          
          client.println("<P>Following is WindDir: ");
          
          if (WindDir <= 27 && WindDir > 17) {WindQ[0] = "E"; WindQ[1] = "";}
          else if (WindDir <= 50 && WindDir > 40) {WindQ[0] = "S"; WindQ[1] = "E";}
          else if (WindDir <= 76 && WindDir > 66) {WindQ[0] = "S"; WindQ[1] = "";}
          else if (WindDir <= 119 && WindDir > 109) {WindQ[0] = "N"; WindQ[1] = "E";}
          else if (WindDir <= 162 && WindDir > 152) {WindQ[0] = "S"; WindQ[1] = "W";}
          else if (WindDir <= 201 && WindDir > 191) {WindQ[0] = "N"; WindQ[1] = "";}
          else if (WindDir <= 226 && WindDir > 216) {WindQ[0] = "N"; WindQ[1] = "W";}
          else {WindQ[0] = "N"; WindQ[1] = "A";}
            
          for (i=0; i<2; i++) server.print(WindQ[i]);
      
          client.println("<P><P>");
          /*RAW data string to be used by other client programs*/
            
          client.print("Temperature: ");
          client.print(temp_c, DEC);
          client.print("C ");
          client.print("<P>Humidity: ");
          client.print(humidity);
          client.println("%");
          client.print("<P>Light Level: ");
          client.print(light);
            
          client.println("<P>RAW: ");
          client.println(WindSpeed);
          client.println(Percipitation);
          client.println(WindDir);
          client.println(temp_c);
          client.println(humidity);
          client.println(light);
          break;
        }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        }
        else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    
    // give the web browser time to receive the data
    delay(1);
    
    // close the connection:
    client.stop();  
  }
}

void setup(){
  
  Serial.begin(9600);
  pinMode(PIN_ANEMOMETER, INPUT);
  digitalWrite(PIN_ANEMOMETER, HIGH);
  attachInterrupt(0, countAnemometer, FALLING);
  
  pinMode(PIN_RAIN, INPUT);
  digitalWrite(PIN_RAIN, HIGH);
  attachInterrupt(1, countRain, FALLING);
  //ISR associated with pin2, goes to countAnemometer function and is triggered when pin goes
  //from HIGH to LOW
  
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
  /* setup our default command that will be run when the user accesses
   * the root page on the server */
  // OLD - > webserver.setDefaultCommand(&helloCmd);
  /* start the webserver */
  
  Timer1.initialize(5000000);
  // initialize timer1, and set a 5 second period - we are sampling at 5 seconds intervals
  Timer1.attachInterrupt(callback);  // attaches callback() as a timer overflow interrupt

}//end setup()

void loop(){
 
  char buff[64];
  int len = 64;
  int i;  

  // listen for incoming Ethernet connections:
  listenForEthernetClients();
  
  // Read values from the sensor
  temp_c = sht1x.readTemperatureC();    
  humidity = sht1x.readHumidity();
  
  //BELOW is a repetition of the test we do for the server output
  //this should be in a function and called from wherever it was needed
  //I had problems to write a function that outputs a string, so screw it, it works!
  if (WindDir <= 27 && WindDir > 17) {WindQ[0] = "E"; WindQ[1] = "";}
  else if (WindDir <= 50 && WindDir > 40) {WindQ[0] = "S"; WindQ[1] = "E";}
  else if (WindDir <= 76 && WindDir > 66) {WindQ[0] = "S"; WindQ[1] = "";}
  else if (WindDir <= 119 && WindDir > 109) {WindQ[0] = "N"; WindQ[1] = "E";}
  else if (WindDir <= 162 && WindDir > 152) {WindQ[0] = "S"; WindQ[1] = "W";}
  else if (WindDir <= 201 && WindDir > 191) {WindQ[0] = "N"; WindQ[1] = "";}
  else if (WindDir <= 226 && WindDir > 216) {WindQ[0] = "N"; WindQ[1] = "W";}
  else {WindQ[0] = "N"; WindQ[1] = "A";}
  
}//end loop()

void countAnemometer() {
   numRevsAnemometer++;
}//end countAnemometer()

void countRain() {
  numClicksRain++;
}//end countRain

void callback(){
  /*the ISR for the timer interrupt, called every 5 seconds*/
  //check how many times the switch was closed on this period? this value is on numRevsAnemometer
  WindSpeed = (numRevsAnemometer/ 5) * 2.4; //2.4 K/h for one switch closure per second
  numRevsAnemometer = 0;

  /*rain caculation*/
  if (visits_counter < top_times) visits_counter++;
  else {
    Percipitation = 0.28*(numClicksRain*60/5);
    //0.2794 mm per contact closure; this step gives number of clicks per minute unit = mm per minute
    numClicksRain = 0;
    visits_counter = 0;
  }
  
  /*Get wind direction*/
  WindDir = analogRead(PIN_VANE);
  WindDir >>= 2;
  
  /*Get light level reading*/
  light = analogRead(PIN_LIGHT);
}
